<!doctype html>
<html>

<head>
  <meta charset="utf-8">
  <title>demo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <script src="/javascripts/easeljs-0.8.2.min.js"></script>
  <script src="/javascripts/alloy_finger.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    .btn {
      position: absolute;
      top: 0;
      left: 0;
    }

    .btn span {
      background: #fff;
      border: 1px solid #ccc;
      padding: 10px;
    }
  </style>
</head>

<body>
  <canvas id="canvas"></canvas>
  <div class="btn">
    <span id='big'>放大</span>
    <span id='small'>缩小</span>
  </div>
</body>
<script>
  (function () {
    var isClick = true;
    var first = true;
    var temp;
    var interVal;
    var winWidth = window.innerWidth;
    var winHeight = window.innerHeight;
    var box = document.querySelector("#canvas");
    var image = new createjs.Bitmap("/images/chooseBg.jpg");
    var clickedContain = false;
    let saveScale;
    var config = {
      imgScale: 1,
      scalStep: 1.1,
      minScale: 0.3,
      maxScale: 10,
      center: {
        x: 0,
        y: 0
      },
      areaOption: [
        {
          name: "1",
          startPoint: [200, 200],
          polygon: [[220, 350], [300, 300]],
          fn: function (e) {
            alert("你点击了这个区域")
          }
        },
        {
          name: "2",
          startPoint: [130, 230],
          polygon: [[40, 160], [100, 60], [230, 90]],
          fn: function (e) {
            location.href = 'http://www.baidu.com'
          }
        },
        {
          name: "2",
          startPoint: [winWidth / 2, winHeight / 2],
          polygon: [[winWidth / 2, 450], [200, winHeight / 2]],
          fn: function (e) {
            location.href = 'http://www.baidu.com'
          }
        },
      ]
    }

    var stage = new createjs.Stage("canvas");
    // stage.canvas.height = winHeight
    //创建容器
    var container = new createjs.Container();
    //添加容器到stage
    stage.addChild(container);

    var bigBtn = document.getElementById('big');
    var smallBtn = document.getElementById('small');

    createjs.Touch.enable(stage)
    createjs.Ticker.setFPS(30);
    createjs.Ticker.addEventListener("tick", stage);

    stage.canvas.width = winWidth
    stage.canvas.height = winHeight

    const drawImg = (x, y) => {
      if (!x) {
        x = container.x
      }
      if (!y) {
        y = container.y
      }
      container.setTransform(x, y, config.imgScale, config.imgScale, 0, 0, 0)
      drawRc()
      stage.update();


    }
    function setGesture(el) {
      var obj = {}; //定义一个对象
      var istouch = false;
      var start = [];
      el.addEventListener("touchstart", function (e) {
        if (e.touches.length >= 2) {  //判断是否有两个点在屏幕上
          istouch = true;
          start = e.touches;  //得到第一组两个点
          obj.gesturestart && obj.gesturestart.call(el); //执行gesturestart方法
        };
      }, false);
      document.addEventListener("touchmove", function (e) {
        e.preventDefault();
        if (e.touches.length >= 2 && istouch) {
          var now = e.touches;  //得到第二组两个点
          var scale = getDistance(now[0], now[1]) / getDistance(start[0], start[1]); //得到缩放比例，getDistance是勾股定理的一个方法
          var rotation = getAngle(now[0], now[1]) - getAngle(start[0], start[1]);  //得到旋转角度，getAngle是得到夹角的一个方法
          e.scale = scale.toFixed(2);
          e.rotation = rotation.toFixed(2);
          obj.gesturemove && obj.gesturemove.call(el, e);  //执行gesturemove方法
        };
      }, false);
      document.addEventListener("touchend", function (e) {
        if (istouch) {
          istouch = false;
          obj.gestureend && obj.gestureend.call(el);  //执行gestureend方法
        };
      }, false);
      return obj;
    };

    const drawRc = () => {
      config.areaOption.forEach((val, i) => {
        var cap = new createjs.Shape();
        cap.graphics.beginFill("red");
        cap.graphics.moveTo(...val.startPoint);
        val.polygon.forEach(item => {
          cap.graphics.lineTo(...item);
        })
        cap.graphics.lineTo(...val.startPoint);
        cap.graphics.endFill();
        cap.on('click', function (e) {
          if (isClick) {
            val.fn(e)
          }
        });
        container.addChild(cap);
      })

      stage.update();
    }

    let oldZoom = false;
    new AlloyFinger(box, {
      multipointStart: function (event) {
        //reset origin x and y
        // var centerX = (event.touches[0].pageX + event.touches[1].pageX) / 2;
        // var centerY = (event.touches[0].pageY + event.touches[1].pageY) / 2;
        // alert(centerX)
        // var offX = centerX - img_centerX;
        // var offY = centerY - img_centerY;
        // var preOriginX = self.img.originX
        // var preOriginY = self.img.originY
        // self.img.originX = offX / self.img.scaleX;
        // self.img.originY = offY / self.img.scaleY;
        // //reset translateX and translateY
        // self.img.translateX += offX - preOriginX * self.img.scaleX;
        // self.img.translateY += offY - preOriginY * self.img.scaleX;
        // self.initScale = self.img.scaleX;
      },
      pinch: function (event) {
        console.log("Ggg");

        if (!!interVal) {
          clearInterval(interVal)
        }
        if (!oldZoom) {
          oldZoom = config.imgScale
        }
        var zoom = event.zoom;

        var mousex = event.pageX - container.x
        var mousey = event.pageY - container.y

        let x, y;
        if (zoom > 1) {
          container.x = container.x - mousex * (zoom - oldZoom)
          container.y = container.y - mousey * (zoom - oldZoom)
        } else {
          container.x = container.x + mousex * (oldZoom - zoom)
          container.y = container.y + mousey * (oldZoom - zoom)
        }
        if (zoom < config.maxScale && zoom > config.minScale) {
          container.setTransform(container.x, container.y, zoom, zoom);
        }
        config.imgScale = oldZoom = zoom
      },
      pressMove: function (e) {
        function checkRound() {
          if ((image.image.width * config.imgScale - winWidth) < Math.abs(container.x)) {
            container.x = -(image.image.width * config.imgScale - winWidth)
          }
          if ((image.image.height * config.imgScale - winHeight) < Math.abs(container.y)) {
            container.y = -(image.image.height * config.imgScale - winHeight)
          }

          if (container.x >= 0) {
            container.x = 0
          }
          if (container.y >= 0) {
            container.y = 0
          }
        }

        interVal = setTimeout(checkRound, 0);

        container.x += e.deltaX;
        container.y += e.deltaY;

        config.center = {
          x: container.x / (config.imgScale),
          y: container.y / (config.imgScale)
        }

      }
      //},
    })

    container.addChild(image);

    bigBtn.addEventListener('click', () => {

      if (config.imgScale < config.maxScale) {
        config.imgScale = config.imgScale * config.scalStep;
        function transFromPoint(x, w, scale) {
          let a = x + (x - w / 2) * (scale - 1)
          //  alert(a)
          if (a > 0) {
            a = 0
          }
          return a
        }
        let x = transFromPoint(config.center.x, winWidth, config.imgScale);

        let y = transFromPoint(config.center.y, winHeight, config.imgScale);

        container.setTransform(x, y, config.imgScale, config.imgScale, 0, 0, 0)
      } else {
        alert('不能再放大了')
      }
    })
    smallBtn.addEventListener('click', () => {
      if (config.imgScale > config.minScale) {
        //saveScale = config.imgScale;
        first = false
        config.imgScale = config.imgScale / config.scalStep;
        function transFromPoint(x, w, scale) {
          let a = x - (x - w / 2) * (1 - scale)
          if (a > 0) {
            a = 0
          }
          return a
        }
        let x = transFromPoint(config.center.x, winWidth, config.imgScale)
        let y = transFromPoint(config.center.y, winHeight, config.imgScale)
        container.setTransform(x, y, config.imgScale, config.imgScale, 0, 0, 0)
      } else {
        alert('不能再缩小了')
      }

    })
    drawImg()
  })()
</script>

</html>