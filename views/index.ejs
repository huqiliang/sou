<!doctype html>
<html>

<head>
  <meta charset="utf-8">
  <title>demo</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <script src="/javascripts/easeljs-0.8.2.min.js"></script>
  <script src="/javascripts/alloy_finger.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    .btn {
      position: absolute;
      top: 0;
      left: 0;
    }

    .btn span {
      background: #fff;
      border: 1px solid #ccc;
      padding: 10px;
    }
  </style>
</head>

<body>
  <canvas id="canvas"></canvas>
  <div class="btn">
    <span id='big'>放大</span>
    <span id='small'>缩小</span>
  </div>
</body>
<script>
  (function () {
    var interVal;
    var winWidth = window.innerWidth;
    var winHeight = window.innerHeight;
    var box = document.querySelector("#canvas");
    var image = new createjs.Bitmap("/images/chooseBg.jpg");
    var config = {
      imgScale: 1,
      scalStep: 1.1,
      minScale: 0.2,
      maxScale: 2,
      center: {
        x: -winWidth / 2,
        y: -winHeight / 2
      },
      areaOption: [
        {
          name: "1",
          startPoint: [200, 200],
          polygon: [[220, 350], [300, 300]],
          fn: function (e) {
            alert("你点击了这个区域")
          }
        },
        {
          name: "2",
          startPoint: [130, 230],
          polygon: [[40, 160], [100, 60], [230, 90]],
          fn: function (e) {
            location.href = 'http://www.baidu.com'
          }
        },
        {
          name: "2",
          startPoint: [winWidth / 2, winHeight / 2],
          polygon: [[winWidth / 2, 450], [200, winHeight / 2]],
          fn: function (e) {
            location.href = 'http://www.baidu.com'
          }
        },
      ]
    }

    var stage = new createjs.Stage("canvas");
    // stage.canvas.height = winHeight
    //创建容器
    var container = new createjs.Container();
    //添加容器到stage
    stage.addChild(container);

    var bigBtn = document.getElementById('big');
    var smallBtn = document.getElementById('small');

    createjs.Touch.enable(stage)
    createjs.Ticker.setFPS(30);
    createjs.Ticker.addEventListener("tick", stage);

    stage.canvas.width = winWidth
    stage.canvas.height = winHeight

    const drawImg = (x, y) => {
      if (!x) {
        x = container.x
      }
      if (!y) {
        y = container.y
      }
      container.setTransform(x, y, config.imgScale, config.imgScale, 0, 0, 0)
      drawRc()
      stage.update();


    }
    const drawRc = () => {
      config.areaOption.forEach((val, i) => {
        var cap = new createjs.Shape();
        cap.graphics.beginFill("red");
        cap.graphics.moveTo(...val.startPoint);
        val.polygon.forEach(item => {
          cap.graphics.lineTo(...item);
        })
        cap.graphics.lineTo(...val.startPoint);
        cap.graphics.endFill();
        cap.on('click', function (e) {

          val.fn(e)
        });
        container.addChild(cap);
      })

      stage.update();
    }

    let oldZoom = false; var mousex, mousey;
    let initScale = 1;
    function checkRound(image, config, winWidth, winHeight, container) {
      if ((image.image.width * config.imgScale - winWidth) < Math.abs(container.x)) {
        container.x = -(image.image.width * config.imgScale - winWidth)
      }
      if ((image.image.height * config.imgScale - winHeight) < Math.abs(container.y)) {
        container.y = -(image.image.height * config.imgScale - winHeight)
      }

      if (container.x >= 0) {
        container.x = 0
      }
      if (container.y >= 0) {
        container.y = 0
      }
    }

    new AlloyFinger(box, {
      multipointStart: function (event) {
        //reset origin x and y
        mousex = (event.touches[0].pageX + event.touches[1].pageX) / 2 - container.x / container.scaleX;
        mousey = (event.touches[0].pageY + event.touches[1].pageY) / 2 - container.y / container.scaleX;
        initScale = container.scaleX;
        clearTimeout(interVal)
      },
      multipointEnd: function (params) {
        interVal = setTimeout(checkRound(image, config, winWidth, winHeight, container), 0);
      },
      pinch: function (event) {
        if (!oldZoom) {
          oldZoom = config.imgScale
        }
        var zoom = event.zoom * initScale
        if (zoom * container.scaleX < config.maxScale && zoom * container.scaleX > config.minScale) {
          container.x -= mousex * (zoom - oldZoom)
          container.y -= mousey * (zoom - oldZoom)
          container.setTransform(container.x, container.y, zoom, zoom);
          config.imgScale = oldZoom = zoom
          interVal = setTimeout(checkRound(image, config, winWidth, winHeight, container), 0);
        }
      },
      pressMove: function (e) {
        container.x += e.deltaX;
        container.y += e.deltaY;

        config.center = {
          x: (container.x - winWidth / 2) / config.imgScale,
          y: (container.y - winHeight / 2) / config.imgScale
        }
        interVal = setTimeout(checkRound(image, config, winWidth, winHeight, container), 0);
      }
      //},
    })

    container.addChild(image);
    function transFromPoint(center, off, config) {
      let a = center * config.imgScale + off / 2
      return a
    }
    function containerScale() {
      container.setTransform(transFromPoint(config.center.x, winWidth, config), transFromPoint(config.center.y, winHeight, config), config.imgScale, config.imgScale)
      interVal = setTimeout(checkRound(image, config, winWidth, winHeight, container), 0);
    }

    bigBtn.addEventListener('click', (e) => {
      e.preventDefault()
      if (config.imgScale < config.maxScale) {
        config.imgScale = config.imgScale * config.scalStep;
        containerScale()


      } else {
        alert('不能再放大了')
      }
    })
    smallBtn.addEventListener('click', () => {
      if (config.imgScale > config.minScale) {
        config.imgScale = config.imgScale / config.scalStep;
        containerScale()
      } else {
        alert('不能再缩小了')
      }

    })
    drawImg()
  })()
</script>

</html>